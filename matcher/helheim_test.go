// This file was generated by git.sr.ht/~nelsam/hel/v4.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package matcher_test

import (
	"time"

	"git.sr.ht/~nelsam/hel/v4/vegr"
)

type mockDiffer struct {
	t          vegr.T
	timeout    time.Duration
	DiffCalled chan bool
	DiffInput  struct {
		Actual, Expected chan interface{}
	}
	DiffOutput struct {
		Ret0 chan string
	}
}

func newMockDiffer(t vegr.T, timeout time.Duration) *mockDiffer {
	m := &mockDiffer{t: t, timeout: timeout}
	m.DiffCalled = make(chan bool, 100)
	m.DiffInput.Actual = make(chan interface{}, 100)
	m.DiffInput.Expected = make(chan interface{}, 100)
	m.DiffOutput.Ret0 = make(chan string, 100)
	return m
}
func (m *mockDiffer) Diff(actual, expected interface{}) (ret0 string) {
	m.t.Helper()
	m.DiffCalled <- true
	m.DiffInput.Actual <- actual
	m.DiffInput.Expected <- expected
	vegr.PopulateReturns(m.t, "Diff", m.timeout, m.DiffOutput, &ret0)
	return ret0
}

type mockMatcher[T any] struct {
	t           vegr.T
	timeout     time.Duration
	MatchCalled chan bool
	MatchInput  struct {
		Actual chan T
	}
	MatchOutput struct {
		Ret0 chan error
	}
}

func newMockMatcher[T any](t vegr.T, timeout time.Duration) *mockMatcher[T] {
	m := &mockMatcher[T]{t: t, timeout: timeout}
	m.MatchCalled = make(chan bool, 100)
	m.MatchInput.Actual = make(chan T, 100)
	m.MatchOutput.Ret0 = make(chan error, 100)
	return m
}
func (m *mockMatcher[T]) Match(actual T) (ret0 error) {
	m.t.Helper()
	m.MatchCalled <- true
	m.MatchInput.Actual <- actual
	vegr.PopulateReturns(m.t, "Match", m.timeout, m.MatchOutput, &ret0)
	return ret0
}

type mockPollable[T any] struct {
	t       vegr.T
	timeout time.Duration
}

func newMockPollable[T any](t vegr.T, timeout time.Duration) *mockPollable[T] {
	m := &mockPollable[T]{t: t, timeout: timeout}
	return m
}

type mockReflectionMatcher struct {
	t           vegr.T
	timeout     time.Duration
	MatchCalled chan bool
	MatchInput  struct {
		V chan interface{}
	}
	MatchOutput struct {
		Ret0 chan interface{}
		Ret1 chan error
	}
}

func newMockReflectionMatcher(t vegr.T, timeout time.Duration) *mockReflectionMatcher {
	m := &mockReflectionMatcher{t: t, timeout: timeout}
	m.MatchCalled = make(chan bool, 100)
	m.MatchInput.V = make(chan interface{}, 100)
	m.MatchOutput.Ret0 = make(chan interface{}, 100)
	m.MatchOutput.Ret1 = make(chan error, 100)
	return m
}
func (m *mockReflectionMatcher) Match(v interface{}) (ret0 interface{}, ret1 error) {
	m.t.Helper()
	m.MatchCalled <- true
	m.MatchInput.V <- v
	vegr.PopulateReturns(m.t, "Match", m.timeout, m.MatchOutput, &ret0, &ret1)
	return ret0, ret1
}
