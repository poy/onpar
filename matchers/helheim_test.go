// This file was generated by git.sr.ht/~nelsam/hel/v4.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package matchers_test

import (
	"time"

	"git.sr.ht/~nelsam/hel/v4/vegr"
)

type mockDiffer struct {
	t          vegr.T
	timeout    time.Duration
	DiffCalled chan bool
	DiffInput  struct {
		Actual, Expected chan any
	}
	DiffOutput struct {
		Ret0 chan string
	}
}

func newMockDiffer(t vegr.T, timeout time.Duration) *mockDiffer {
	m := &mockDiffer{t: t, timeout: timeout}
	m.DiffCalled = make(chan bool, 100)
	m.DiffInput.Actual = make(chan any, 100)
	m.DiffInput.Expected = make(chan any, 100)
	m.DiffOutput.Ret0 = make(chan string, 100)
	return m
}
func (m *mockDiffer) Diff(actual, expected any) (ret0 string) {
	m.t.Helper()
	m.DiffCalled <- true
	m.DiffInput.Actual <- actual
	m.DiffInput.Expected <- expected
	vegr.PopulateReturns(m.t, "Diff", m.timeout, m.DiffOutput, &ret0)
	return ret0
}

type mockMatcher struct {
	t           vegr.T
	timeout     time.Duration
	MatchCalled chan bool
	MatchInput  struct {
		Actual chan any
	}
	MatchOutput struct {
		ResultValue chan any
		Err         chan error
	}
}

func newMockMatcher(t vegr.T, timeout time.Duration) *mockMatcher {
	m := &mockMatcher{t: t, timeout: timeout}
	m.MatchCalled = make(chan bool, 100)
	m.MatchInput.Actual = make(chan any, 100)
	m.MatchOutput.ResultValue = make(chan any, 100)
	m.MatchOutput.Err = make(chan error, 100)
	return m
}
func (m *mockMatcher) Match(actual any) (resultValue any, err error) {
	m.t.Helper()
	m.MatchCalled <- true
	m.MatchInput.Actual <- actual
	vegr.PopulateReturns(m.t, "Match", m.timeout, m.MatchOutput, &resultValue, &err)
	return resultValue, err
}
