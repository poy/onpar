// Code generated by git.sr.ht/~nelsam/hel. DO NOT EDIT.
//
// This file contains mocks generated by hel. Do not edit this code by
// hand unless you *really* know what you're doing. Expect any changes
// made manually to be overwritten the next time hel regenerates this
// file.

package onpar_test

import (
	"testing"
	"time"

	"git.sr.ht/~nelsam/hel/vegr"
)

type mockTestRunner struct {
	t         vegr.T
	timeout   time.Duration
	RunCalled chan bool
	RunInput  struct {
		Name chan string
		Fn   chan func(*testing.T)
	}
	RunOutput struct {
		Ret0 chan bool
	}
	CleanupCalled chan bool
	CleanupInput  struct {
		Arg0 chan func()
	}
}

func newMockTestRunner(t vegr.T, timeout time.Duration) *mockTestRunner {
	m := &mockTestRunner{t: t, timeout: timeout}
	m.RunCalled = make(chan bool, 100)
	m.RunInput.Name = make(chan string, 100)
	m.RunInput.Fn = make(chan func(*testing.T), 100)
	m.RunOutput.Ret0 = make(chan bool, 100)
	m.CleanupCalled = make(chan bool, 100)
	m.CleanupInput.Arg0 = make(chan func(), 100)
	return m
}
func (m *mockTestRunner) Run(name string, fn func(*testing.T)) (ret0 bool) {
	m.t.Helper()
	m.RunCalled <- true
	m.RunInput.Name <- name
	m.RunInput.Fn <- fn
	vegr.PopulateReturns(m.t, "Run", m.timeout, m.RunOutput, &ret0)
	return ret0
}
func (m *mockTestRunner) Cleanup(arg0 func()) {
	m.t.Helper()
	m.CleanupCalled <- true
	m.CleanupInput.Arg0 <- arg0
}
